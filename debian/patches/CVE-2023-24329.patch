Backported of:


From 72d356e3584ebfb8e813a8e9f2cd3dccf233c0d9 Mon Sep 17 00:00:00 2001
From: "Miss Islington (bot)"
 <31488909+miss-islington@users.noreply.github.com>
Date: Sun, 13 Nov 2022 11:00:25 -0800
Subject: [PATCH] gh-99418: Make urllib.parse.urlparse enforce that a scheme
 must begin with an alphabetical ASCII character. (GH-99421)

Prevent urllib.parse.urlparse from accepting schemes that don't begin with an alphabetical ASCII character.

RFC 3986 defines a scheme like this: `scheme = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )`
RFC 2234 defines an ALPHA like this: `ALPHA = %x41-5A / %x61-7A`

The WHATWG URL spec defines a scheme like this:
`"A URL-scheme string must be one ASCII alpha, followed by zero or more of ASCII alphanumeric, U+002B (+), U+002D (-), and U+002E (.)."`
(cherry picked from commit 439b9cfaf43080e91c4ad69f312f21fa098befc7)

Co-authored-by: Ben Kallus <49924171+kenballus@users.noreply.github.com>
Index: python2.7-2.7.18/Lib/test/test_urlparse.py
===================================================================
--- python2.7-2.7.18.orig/Lib/test/test_urlparse.py
+++ python2.7-2.7.18/Lib/test/test_urlparse.py
@@ -1,3 +1,6 @@
+# -*- coding: utf-8 -*-
+#
+from functools import wraps
 from test import test_support
 import sys
 import unicodedata
@@ -69,6 +72,64 @@ parse_qs_test_cases = [
     (b"a=1;a=2", {b'a': [b'1', b'2']}),
 ]
 
+# CVE-2023-24329: as python2.7 hasn't
+# subTest method adding some meta functions
+# to backport test_attributes_bad_scheme.
+cmd_parse = urlparse.urlparse
+cmd_split = urlparse.urlsplit
+test_attr_bad_scheme = [
+    [False, cmd_split, '.'],
+    [False, cmd_split, '+'],
+    [False, cmd_split, '-'],
+    [False, cmd_split, '0'],
+    [False, cmd_split, 'http&'],
+    [False, cmd_split, '६http'],
+    [False, cmd_parse, '.'],
+    [False, cmd_parse, '+'],
+    [False, cmd_parse, '-'],
+    [False, cmd_parse, '0'],
+    [False, cmd_parse, 'http&'],
+    [False, cmd_parse, '६http'],
+    [True, cmd_split, '.'],
+    [True, cmd_split, '+'],
+    [True, cmd_split, '-'],
+    [True, cmd_split, '0'],
+    [True, cmd_split, 'http&'],
+    [True, cmd_split, '६http'],
+    [True, cmd_parse, '.'],
+    [True, cmd_parse, '+'],
+    [True, cmd_parse, '-'],
+    [True, cmd_parse, '0'],
+    [True, cmd_parse, 'http&'],
+    [True, cmd_parse, '६http']
+    ]
+
+def subTest_CVE_2023_24329_args(*args):
+    def wrapper(func):
+        setattr(func, '%n_args', args)
+        return func
+    return wrapper
+
+def subTest_CVE_2023_24329_meta_class(cls):
+    def add_to_class(func, *args, **kwargs):
+        @wraps(func)
+        def wrapper(self):
+            return func(self, *args, **kwargs)
+        return wrapper
+
+    for n, func in list(cls.__dict__.items()):
+        if hasattr(func, '%n_args'):
+            arg_list = getattr(func, '%n_args')[0]
+            for arg in arg_list:
+                arg[0] = 'True' if arg[0] else 'False'
+                t_name = "_".join([arg[0], arg[1].__name__, arg[2]])
+                testcase_name = getattr(arg, "__name__", t_name)
+                setattr(cls, testcase_name, add_to_class(func, bytes=arg[0],
+                    parse=arg[1], scheme=arg[2]))
+            delattr(cls, n)
+    return cls
+
+@subTest_CVE_2023_24329_meta_class
 class UrlParseTestCase(unittest.TestCase):
 
     def checkRoundtrips(self, url, parsed, split):
@@ -555,6 +616,23 @@ class UrlParseTestCase(unittest.TestCase
         self.assertEqual(p.netloc, "www.example.net:foo")
         self.assertRaises(ValueError, lambda: p.port)
 
+    @subTest_CVE_2023_24329_args(test_attr_bad_scheme)
+    def test_attributes_bad_scheme(self, bytes, parse, scheme):
+        """Check handling of invalid schemes."""
+        url = scheme + "://www.example.net"
+        if bytes:
+            if all(ord(c) < 128 for c in url):
+                url = url.encode("ascii")
+            else:
+                # We 'skip' if it is not ascii and it is byte
+                return
+
+        p = parse(url)
+        if bytes:
+            self.assertEqual(p.scheme, b"")
+        else:
+            self.assertEqual(p.scheme, "")
+
     def test_attributes_without_netloc(self):
         # This example is straight from RFC 3261.  It looks like it
         # should allow the username, hostname, and port to be filled
Index: python2.7-2.7.18/Lib/urlparse.py
===================================================================
--- python2.7-2.7.18.orig/Lib/urlparse.py
+++ python2.7-2.7.18/Lib/urlparse.py
@@ -65,6 +65,11 @@ scheme_chars = ('abcdefghijklmnopqrstuvw
 MAX_CACHE_SIZE = 20
 _parse_cache = {}
 
+# Backporting for CVE_2023_24329 as python2.7 hasn't
+# method isascii
+def is_ascii(string):
+    return all(ord(char) < 128 for char in string)
+
 def clear_cache():
     """Clear the parse cache."""
     _parse_cache.clear()
@@ -199,7 +204,7 @@ def urlsplit(url, scheme='', allow_fragm
         clear_cache()
     netloc = query = fragment = ''
     i = url.find(':')
-    if i > 0:
+    if i > 0 and is_ascii(url[0]) and url[0].isalpha():
         if url[:i] == 'http': # optimize the common case
             scheme = url[:i].lower()
             url = url[i+1:]
